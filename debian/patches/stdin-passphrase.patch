--- a/osslsigncode.c	2020-10-11 20:33:58.000000000 +0100
+++ b/osslsigncode.c	2022-08-18 16:22:23.106288966 +0100
@@ -4886,38 +4906,42 @@ static char *getpassword(const char *prompt)
 
 static int read_password(GLOBAL_OPTIONS *options)
 {
-	char passbuf[4096];
+	char passbuf[4096] = {0};
 	int passlen;
 	const u_char utf8_bom[] = {0xef, 0xbb, 0xbf};
 
 	if (options->readpass) {
+		if (!strcmp(options->readpass, "-")) {
+			passlen = read(fileno(stdin), passbuf, sizeof(passbuf)-1);
+		} else {
 #ifdef WIN32
-		HANDLE fhandle, fmap;
-		LPVOID faddress;
-		fhandle = CreateFile(options->readpass, GENERIC_READ, FILE_SHARE_READ, NULL, OPEN_EXISTING, 0, NULL);
-		if (fhandle == INVALID_HANDLE_VALUE) {
-			return 0; /* FAILED */
-		}
-		fmap = CreateFileMapping(fhandle, NULL, PAGE_READONLY, 0, 0, NULL);
-		if (fmap == NULL) {
-			return 0; /* FAILED */
-		}
-		faddress = MapViewOfFile(fmap, FILE_MAP_READ, 0, 0, 0);
-		if (faddress == NULL) {
-			return 0; /* FAILED */
-		}
-		passlen = (int)GetFileSize(fhandle, NULL);
-		memcpy(passbuf, faddress, passlen);
-		UnmapViewOfFile(faddress);
-		CloseHandle(fhandle);
+			HANDLE fhandle, fmap;
+			LPVOID faddress;
+			fhandle = CreateFile(options->readpass, GENERIC_READ, FILE_SHARE_READ, NULL, OPEN_EXISTING, 0, NULL);
+			if (fhandle == INVALID_HANDLE_VALUE) {
+				return 0; /* FAILED 	*/
+			}
+			fmap = CreateFileMapping(fhandle, NULL, PAGE_READONLY, 0, 0, NULL);
+			if (fmap == NULL) {
+				return 0; /* FAILED */
+			}
+			faddress = MapViewOfFile(fmap, FILE_MAP_READ, 0, 0, 0);
+			if (faddress == NULL) {
+				return 0; /* FAILED */
+			}
+			passlen = (int)GetFileSize(fhandle, NULL);
+			memcpy(passbuf, faddress, passlen);
+			UnmapViewOfFile(faddress);
+			CloseHandle(fhandle);
 #else
-		int passfd = open(options->readpass, O_RDONLY);
-		if (passfd < 0) {
-			return 0; /* FAILED */
-		}
-		passlen = (int)read(passfd, passbuf, sizeof passbuf - 1);
-		close(passfd);
+			int passfd = open(options->readpass, O_RDONLY);
+			if (passfd < 0) {
+				return 0; /* FAILED */
+			}
+			passlen = (int)read(passfd, passbuf, sizeof passbuf - 1);
+			close(passfd);
 #endif /* WIN32 */
+		}
 		if (passlen <= 0) {
 			return 0; /* FAILED */
 		}
